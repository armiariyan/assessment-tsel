// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repositories/products.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/repositories/products.go -destination=internal/domain/repositories/mocks/mock_products.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/armiariyan/assessment-tsel/internal/domain/entities"
	constants "github.com/armiariyan/assessment-tsel/internal/pkg/constants"
	utils "github.com/armiariyan/assessment-tsel/internal/pkg/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockProductsRepository is a mock of ProductsRepository interface.
type MockProductsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductsRepositoryMockRecorder
}

// MockProductsRepositoryMockRecorder is the mock recorder for MockProductsRepository.
type MockProductsRepositoryMockRecorder struct {
	mock *MockProductsRepository
}

// NewMockProductsRepository creates a new mock instance.
func NewMockProductsRepository(ctrl *gomock.Controller) *MockProductsRepository {
	mock := &MockProductsRepository{ctrl: ctrl}
	mock.recorder = &MockProductsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsRepository) EXPECT() *MockProductsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductsRepository) Create(ctx context.Context, entity *entities.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProductsRepositoryMockRecorder) Create(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductsRepository)(nil).Create), ctx, entity)
}

// DeleteByID mocks base method.
func (m *MockProductsRepository) DeleteByID(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockProductsRepositoryMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockProductsRepository)(nil).DeleteByID), ctx, id)
}

// FindAllAndCount mocks base method.
func (m *MockProductsRepository) FindAllAndCount(ctx context.Context, pagination constants.PaginationRequest, conds ...utils.DBCond) ([]entities.Product, int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pagination}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllAndCount", varargs...)
	ret0, _ := ret[0].([]entities.Product)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllAndCount indicates an expected call of FindAllAndCount.
func (mr *MockProductsRepositoryMockRecorder) FindAllAndCount(ctx, pagination any, conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pagination}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAndCount", reflect.TypeOf((*MockProductsRepository)(nil).FindAllAndCount), varargs...)
}

// FindByIDOrError mocks base method.
func (m *MockProductsRepository) FindByIDOrError(ctx context.Context, id uint) (entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDOrError", ctx, id)
	ret0, _ := ret[0].(entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDOrError indicates an expected call of FindByIDOrError.
func (mr *MockProductsRepositoryMockRecorder) FindByIDOrError(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDOrError", reflect.TypeOf((*MockProductsRepository)(nil).FindByIDOrError), ctx, id)
}

// UpdateByID mocks base method.
func (m *MockProductsRepository) UpdateByID(ctx context.Context, id uint, entity *entities.Product) (entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, entity)
	ret0, _ := ret[0].(entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockProductsRepositoryMockRecorder) UpdateByID(ctx, id, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockProductsRepository)(nil).UpdateByID), ctx, id, entity)
}
